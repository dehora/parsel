#!/usr/bin/env python

import os
import time
import sys
from optparse import OptionParser, OptionGroup
from parsel.sftp import create_sftp

import boto
import boto.ec2


def _get_region(zone):
    return zone[:-1]


def start(max_count,
          security_group,
          availability_zone,
          ami_id,
          instance_type,
          ssh_username,
          ssh_key_file_path,
          ssh_key_aws_name,
          baking_cert_file_name,
          baking_pk_file_name,
          parsel_dir,
          pem_dir):
    max_count = int(max_count)
    if not os.path.isfile(ssh_key_file_path):
        print 'No such key file %s' % ssh_key_file_path
        return

    region = _get_region(availability_zone)
    print 'Connecting to AWS.'
    ec2 = boto.ec2.connect_to_region(region)
    print 'Starting %i instance%s in %s.' % (max_count, ("" if max_count == 1 else "s"), ec2,)

    reservation = ec2.run_instances(
        image_id=ami_id,
        min_count=max_count,
        max_count=max_count,
        key_name=ssh_key_aws_name,
        security_groups=[security_group],
        instance_type=instance_type,
        placement=availability_zone)

    print 'Creating instance%s' % ("" if max_count == 1 else "s")
    instance_ids = []
    for instance in reservation.instances:
        instance.update()
        while instance.state != 'running':
            print '.'
            time.sleep(5)
            instance.update()
        instance_ids.append(instance.id)

        print 'Instance %s, %s, %s created.' % (instance.id, instance.public_dns_name, instance.ip_address,)
        print 'Will begin uploading parsel in 15s'
        time.sleep(15)

        host = instance.public_dns_name
        sftp = create_sftp(host, ssh_username, ssh_key_file_path)

        print 'Uploading pem files to %s [%s, %s]...' % (host, baking_pk_file_name, baking_cert_file_name)
        upload_credentials(sftp, pem_dir, baking_pk_file_name, baking_cert_file_name)
        print "...Uploading pk and cert files done."

        print "Uploading parsel [%s] ..." % (parsel_dir,)
        upload_parsel(sftp, parsel_dir, "/home/ubuntu")
        print "...Uploading parsel done."

        print "Uploading awscredential.properties file for Priam until we get IAM creds setup. Pure evil."
        put(sftp, os.path.join(pem_dir, "awscredential.properties"), "awscredential.properties")

        print "\nInstance creation complete, ssh string follows:"
        print '  ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i %s -l %s %s \n' % (
            os.path.join(ssh_key_file_path), ssh_username, instance.ip_address,)

    ec2.create_tags(instance_ids, {"baker": "CassandraBaker"})
    print """Finished. All instances tagged as 'baker':'CassandraBaker'"""


def upload_credentials(sftp, pem_home, baking_pk_file_name, baking_cert_file_name):
    put(sftp, os.path.join(pem_home, baking_pk_file_name), baking_pk_file_name)
    put(sftp, os.path.join(pem_home, baking_cert_file_name), baking_cert_file_name)


def upload_parsel(sftp, parsel_dir, where):
    rput(sftp, parsel_dir, where)


def rput(sftp, localpath, remotepath):
    pwd = os.getcwd()
    os.chdir(os.path.split(localpath)[0])
    parent = os.path.split(localpath)[1]
    for w in os.walk(parent):
        # noinspection PyBroadException
        try:
            sftp.mkdir(os.path.join(remotepath, w[0]))
        except:
            pass
        for f in w[2]:
            put(sftp, os.path.join(w[0], f), os.path.join(remotepath, w[0], f))
    os.chdir(pwd)


def put(sftp, localfile, remotefile):
    sftp.put(localfile, remotefile)


def terminate(region):
    print 'Connecting to AWS.'
    ec2 = boto.ec2.connect_to_region(region)
    reservations = ec2.get_all_instances()
    for reservation in reservations:
        ri = reservation.instances
        if 'baker' in ri[0].tags and ri[0].tags['baker'] == 'CassandraBaker' and ri[0].update() == 'running':
            print "found reservation", reservation
            for instance in reservation.instances:
                print 'Killing instance in %s, %s, %s, %s ...' % (
                    instance.placement, instance.id, instance.public_dns_name, instance.ip_address,)
                ec2.terminate_instances([instance.id])


# noinspection PyUnusedLocal
def main(argv=None):
    parser = OptionParser(usage="""

    instance COMMAND [options]

Create an EC2 instance.

Commands:
    start       Start a baking instance in a given AZ.
    terminate   Destroy the baking instances in a given Region.    """)
    start_group = OptionGroup(parser, "start",
                              "You must provide the -k flag (EC2 Keypair) and the -p flag (Keypair path).")

    start_group.add_option(
        '-k', '--keyname', metavar="KEY", nargs=1, action='store', dest='ssh_key_aws_name', type='string',
        help="The ssh key pair name as expected by AWS.")
    start_group.add_option(
        '-p', '--keypath', metavar="KEYPATH", nargs=1, action='store', dest='ssh_key_file_path', type='string',
        help="Path to the ssh key pair.")
    start_group.add_option(
        '-g', '--group', metavar="GROUP", nargs=1, action='store', dest='security_group', type='string',
        default='default',
        help="The security group (default: default).")
    start_group.add_option(
        '-z', '--zone', metavar="ZONE", nargs=1, action='store', dest='availability_zone', type='string',
        default='eu-west-1a',
        help="The availability zone (default: eu-west-1a).")
    start_group.add_option(
        '-a', '--ami', metavar="AMI", nargs=1, action='store', dest='ami_id', type='string',
        help="The AMI id.")
    start_group.add_option(
        '-t', '--type', metavar="TYPE", nargs=1, action='store', dest='instance_type', type='string',
        default='m1.xlarge',
        help="The instance-type (default: m1.medium).")
    start_group.add_option(
        '-l', '--login', metavar="LOGIN", nargs=1, action='store', dest='ssh_username', type='string',
        help="The ssh username name to use.")
    start_group.add_option(
        '-c', '--baking-cert', metavar="BCERT", nargs=1, action='store', dest='baking_cert_file_name', type='string',
        help="=Name of the cert used to bake the AMI. Expected to be found under -h")
    start_group.add_option(
        '-b', '--baking-key', metavar="BKEY", nargs=1, action='store', dest='baking_pk_file_name', type='string',
        help="Name of the key used to bake the AMI. Expected to be found under -h")
    start_group.add_option(
        '-d', '--parsel-dir', metavar="PARSELD", nargs=1, action='store', dest='parsel_dir', type='string',
        help="Location of the parsel repo you want to upload to the instance.")
    start_group.add_option(
        '-e', '--pem-dir', metavar="PEMD", nargs=1, action='store', dest='pem_dir', type='string',
        help="Location of the pem files.")

    parser.add_option_group(start_group)

    kill_group = OptionGroup(parser, "terminate",
                             "You must provide the -r command (EC2 region).")
    kill_group.add_option(
        '-r', '--region', metavar="TZONE", nargs=1, action='store', dest='region', type='string', default='eu-west-1',
        help="The region (default: eu-west-1).")

    parser.add_option_group(kill_group)

    (options, args) = parser.parse_args()
    if len(args) <= 0:
        parser.error('Please enter a command.')

    command = args[0]
    if command == 'start':
        if not options.ssh_key_file_path:
            parser.error('Please provide a key-pair name with -k')
        if not options.ssh_key_file_path:
            parser.error('Please provide a  key-pair path with -p')
        if not options.ami_id:
            parser.error('Please provide an AMI with -a')
        if options.security_group == 'default':
            print 'Instance will be placed in the "default" security group. Use ec2 tools to open port 22.'

        start(1,
              options.security_group,
              options.availability_zone,
              options.ami_id,
              options.instance_type,
              options.ssh_username,
              options.ssh_key_file_path,
              options.ssh_key_aws_name,
              options.baking_cert_file_name,
              options.baking_pk_file_name,
              options.parsel_dir,
              options.pem_dir)

    if command == 'terminate':
        if not options.region:
            parser.error('Please provide a region -r')

        terminate(options.region)


if __name__ == "__main__":
    sys.exit(main())