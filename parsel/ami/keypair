#!/usr/bin/env python

import boto
import boto.ec2
import os
import sys
import traceback
from optparse import OptionParser, OptionGroup

# Based on ComboAMI, see https://github.com/riptano/ComboAMI


ami_dict = [
    {
        'region': 'us-east-1',
        'ami': 'ami-f2191786'
    },
    {
        'region': 'us-west-1',
        'ami': 'ami-f2191786'
    },
    {
        'region': 'us-west-2',
        'ami': 'ami-f2191786'
    },
    {
        'region': 'eu-west-1',
        'ami': 'ami-f2191786'
    },
    {
        'region': 'ap-southeast-1',
        'ami': 'ami-f2191786'
    },
    {
        'region': 'ap-southeast-2',
        'ami': 'ami-f2191786'
    },
    {
        'region': 'ap-northeast-1',
        'ami': 'ami-f2191786'
    },
    {
        'region': 'sa-east-1',
        'ami': 'ami-f2191786'
    }
]


def create_key_pairs(keypath, keypair, secretkey):
    aws_access_key_id = keypair
    aws_secret_access_key = secretkey
    pem_home = keypath
    for ami in ami_dict:
        conn = boto.ec2.connect_to_region(
            ami['region'],
            aws_access_key_id=aws_access_key_id,
            aws_secret_access_key=aws_secret_access_key)

        # noinspection PyBroadException
        try:
            print 'Creating key pair: %s' % (ami, )
            key = conn.create_key_pair(ami['region'])
            # noinspection PyBroadException
            try:
                print 'Saving keypair: %s' % (os.path.join(pem_home, ami['region']), )
                key.save(pem_home)
            except Exception:
                print 'Could not save locally, deleting key pair in AWS: %s' % (ami, )
                traceback.print_exc()
                conn.delete_key_pair(ami['region'])
                sys.exit(1)
        except Exception:
            print "Couldn't create key pair, error follows:"
            traceback.print_exc()


# noinspection PyUnusedLocal
def main(argv=None):
    parser = OptionParser(usage="""

    keypair COMMAND [options]

Create EC2 key pairs.

Commands:
    create       Create key pairs in each region
    env_create   Create key pairs in each region using env vars,

    """)
    create_group = OptionGroup(parser, "create", "You must provide the -p, -k, and -s options.")
    create_group.add_option(
        '-p', '--keypath', metavar="KEYPATH", nargs=1, action='store', dest='keypath', type='string',
        help="Path to the key pair location.")
    create_group.add_option(
        '-k', '--keypair', metavar="PKEY", nargs=1, action='store', dest='keypair', type='string', default='default',
        help="Your AWS key pair.")
    create_group.add_option(
        '-s', '--secretkey', metavar="SKEY", nargs=1, action='store', dest='secretkey', type='string',
        help="Your AWS secret key.")
    parser.add_option_group(create_group)
    remove_group = OptionGroup(parser, "remove", "Not supported yet.")
    parser.add_option_group(remove_group)
    (options, args) = parser.parse_args()
    if len(args) <= 0:
        parser.error('Please enter a command.')
    command = args[0]
    if command == 'create':
        if not options.keypath:
            parser.error('Please provide a path name with -p')
        if not options.keypair:
            parser.error('Please provide a  key-pair path with -k')
        if not options.secretkey:
            parser.error('Please provide a secretkey with -s')
        create_key_pairs(options.keypath, options.keypair, options.secretkey)
    elif command == "env_create":
        aws_access_key_id = os.getenv('AWS_ACCESS_KEY', 'aws_access_key_id')
        aws_secret_access_key = os.getenv('AWS_SECRET_KEY', 'aws_secret_access_key')
        pem_home = os.getenv('AWS_PEM_HOME', 'aws_pem_home')
        create_key_pairs(pem_home, aws_access_key_id, aws_secret_access_key)
    else:
        parser.error('Command not recognized.')


if __name__ == "__main__":
    sys.exit(main())