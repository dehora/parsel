#!/usr/bin/env python

import time
import os
import sys
from optparse import OptionParser

from parsel.ntp import TimeInstaller
from parsel.logger import pipe, info
from fabric.api import local, settings, abort
from fabric.contrib.console import confirm

# Based on ComboAMI, see https://github.com/riptano/ComboAMI

JAVA_BASE = "/opt/java/64"


def update_distro():
    pipe('echo "deb http://archive.canonical.com/ precise partner"',
         'sudo tee -a /etc/apt/sources.list.d/java.sources.list')
    local('sudo apt-get -y update')
    time.sleep(10)
    local('sudo apt-get -y update')


def install_packages():

    for package in ["libjna-java",
                    "htop",
                    "emacs23-nox",
                    "sysstat",
                    "sysstat",
                    "iftop",
                    "binutils",
                    "pssh",
                    "pbzip2",
                    "xfsprogs",
                    "zip",
                    "unzip",
                    "ruby",
                    "openssl",
                    "libopenssl-ruby",
                    "curl",
                    "maven2",
                    "ant",
                    "liblzo2-dev",
                    "ntp",
                    "subversion",
                    "python-pip",
                    "tree"]:
        with settings(warn_only=True):
            result = local("sudo apt-get -y install --fix-missing %s" % package)
        if result.failed and not confirm("apt-get %s failed. Continue anyway?" % package):
            abort("Failing on %s" % package)

    for package in ["acl",
                    "policykit-1",
                    "ca-certificates-java",
                    "icedtea-6-jre-cacao",
                    "java-common",
                    "jsvc",
                    "libavahi-client3",
                    "libavahi-common-data",
                    "libavahi-common3",
                    "libcommons-daemon-java",
                    "libcups2",
                    "libjna-java",
                    "libjpeg62",
                    "liblcms1",
                    "libnspr4-0d",
                    "libnss3-1d",
                    "tzdata-java"]:
        with settings(warn_only=True):
            result = local("sudo apt-get -y install  %s" % package)
        if result.failed and not confirm("apt-get %s failed. Continue anyway?" % package):
            abort("Failing on %s" % package)

    for package in ["mdadm"]:
        with settings(warn_only=True):
            result = local("sudo apt-get -y --no-install-recommends install  %s" % package)
        if result.failed and not confirm("apt-get %s failed. Continue anyway?" % package):
            abort("Failing on %s" % package)


def install_java6(java6_uri, java_bin, java_version):
    java_home = "%s/%s" % (JAVA_BASE, java_version)
    home_path = '/home/ubuntu/parsel/parsel/ami'
    local('sudo wget %s' % (java6_uri, ))
    local('sudo mkdir -p %s' % (JAVA_BASE, ))
    local('sudo mv %s %s' % (java_bin, JAVA_BASE, ))
    os.chdir(JAVA_BASE)
    local('sudo chmod +x %s' % (java_bin, ))
    local('echo "Installing Java, this can take a while."')
    local('sudo ./%s' % (java_bin,))
    local('sudo update-alternatives --install "/usr/bin/java" "java" "%s/bin/java" 1' % (java_home,))
    local('sudo update-alternatives --set java %s/bin/java' % (java_home,))
    os.chdir(home_path)
    return java_home


def setup_profiles():
    profile = '/home/ubuntu/.profile'
    local('sudo chmod 777 ' + profile)
    with open(profile, 'a') as f:
        f.write("""

python parsel/parsel/rund/motd.py
export JAVA_HOME=/opt/java/64/jdk1.6.0_38
export PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel
""")
    local('sudo chmod 644 ' + profile)

    bashrc = '/home/ubuntu/.bashrc'
    local('sudo chmod 777 ' + bashrc)
    with open(bashrc, 'a') as f:
        f.write("""

export JAVA_HOME=/opt/java/64/jdk1.6.0_38
export PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel
""")
    local('sudo chmod 644 ' + bashrc)
    local('sudo chmod 777 /root/.profile')
    local('sudo echo "JAVA_HOME=/opt/java/64/jdk1.6.0_38" >> /root/.profile')
    local('sudo echo "PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel" >> /root/.profile')
    local('sudo chmod 644 /root/.profile')
    local('sudo chmod 777 /root/.bashrc')
    local('sudo echo "JAVA_HOME=/opt/java/64/jdk1.6.0_38" >> /root/.bashrc')
    local('sudo echo "PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel" >> /root/.bashrc')
    local('sudo chmod 644 /root/.bashrc')

    os.chdir('/home/ubuntu')


def install_initd(java_home):
    initscript = """#!/bin/sh

### BEGIN INIT INFO
# Provides:
# Required-Start:    $remote_fs $syslog
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: Start AMI Configurations on boot.
# Description:       Enables AMI Configurations on startup.
### END INIT INFO

export JAVA_HOME=%s
export PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel
sudo su -c 'ulimit -n 32768'
sudo mkdir -p /etc/parsel
sudo mkdir -p /var/log/parsel
sudo touch /etc/parsel/parsel.conf
sudo chown -R ubuntu:ubuntu /etc/parsel
sudo chown -R ubuntu:ubuntu /var/log/parsel
echo 1 | sudo tee /proc/sys/vm/overcommit_memory
echo "\n$(date %s) -------------------------------------\n" >> /var/log/parsel/parsel.log
cd /home/ubuntu/parsel/parsel/rund
python initd_configure.py""" % (java_home, "+\%Y-\%m-\%d-\%H\%M\%S")

    local('sudo touch /etc/init.d/init-parsel.sh')
    local('sudo chmod 777 /etc/init.d/init-parsel.sh')
    with open('/etc/init.d/init-parsel.sh', 'w') as f:
        f.write(initscript)
    local('sudo chmod 755 /etc/init.d/init-parsel.sh')
    local('sudo update-rc.d -f init-parsel.sh start 99 2 3 4 5 .')


def setup_limits_conf():
    pipe('echo "* soft nofile 32768"', 'sudo tee -a /etc/security/limits.conf')
    pipe('echo "* hard nofile 32768"', 'sudo tee -a /etc/security/limits.conf')
    pipe('echo "root soft nofile 32768"', 'sudo tee -a /etc/security/limits.conf')
    pipe('echo "root hard nofile 32768"', 'sudo tee -a /etc/security/limits.conf')


def cleandown_instance():
    local('sudo rm .ssh/authorized_keys')
    local("sudo rm -rf /etc/ssh/ssh_host_dsa_key*")
    local("sudo rm -rf /etc/ssh/ssh_host_key*")
    local("sudo rm -rf /etc/ssh/ssh_host_rsa_key*")
    local("sudo rm -rf /tmp/*")
    local("sudo rm -rf /tmp/.*")
    local('rm -rf ~/.bash_history && history -c')


def evil_priam_auth():
    local("sudo mv /home/ubuntu/awscredential.properties /etc")


def install_tomcat():
    local('sudo apt-get -y install tomcat7')


def setup_logging():
    local("sudo mkdir -p /var/log/parsel")
    local("sudo chown -hR ubuntu:ubuntu /var/log/parsel")


def install_jmxtrans(jmxtrans_deb_uri, jmxtrans_deb_file):
    local('sudo wget %s' % jmxtrans_deb_uri)
    local('sudo dpkg -o DPkg::Options::="--force-confold" -i %s' % jmxtrans_deb_file)
    local('sudo rm %s' % jmxtrans_deb_file)


def setup_profiles(java_home):
    profile = '/home/ubuntu/.profile'
    local('sudo chmod 777 ' + profile)
    with open(profile, 'a') as f:
        f.write("""

python parsel/parsel/rund/motd.py
export JAVA_HOME=%s
export PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel
""" % (java_home,))

    local('sudo chmod 644 ' + profile)
    bashrc = '/home/ubuntu/.bashrc'
    local('sudo chmod 777 ' + bashrc)
    with open(bashrc, 'a') as f:
        f.write("""

export JAVA_HOME=%s
export PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel
""" % (java_home,))
    local('sudo chmod 644 ' + bashrc)
    local('sudo chmod 777 /root/.profile')
    local('sudo echo "JAVA_HOME=%s" >> /root/.profile' % (java_home,))
    local('sudo echo "PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel" >> /root/.profile')
    local('sudo chmod 644 /root/.profile')
    local('sudo chmod 777 /root/.bashrc')
    local('sudo echo "JAVA_HOME=%s" >> /root/.bashrc' % (java_home,))
    local('sudo echo "PYTHONPATH=${PYTHONPATH}:/home/ubuntu/parsel" >> /root/.bashrc')
    local('sudo chmod 644 /root/.bashrc')
    os.chdir('/home/ubuntu')


def prepare(jmxtrans_deb_uri, jmxtrans_deb_file, java6_uri, java_bin, java_version, jmxtrans=True):
    setup_logging()
    info("jmxtrans: %s" % jmxtrans)
    info("jmxtrans_deb_uri: %s" % jmxtrans_deb_uri)
    info("jmxtrans_deb_file: %s" % jmxtrans_deb_file)
    info("java6_uri: %s" % java6_uri)
    info("java_bin: %s" % java_bin)
    info("java_version: %s" % java_version)
    update_distro()
    TimeInstaller().setup_ntp()
    java_home = install_java6(java6_uri, java_bin, java_version)
    install_packages()
    setup_profiles(java_home)
    setup_limits_conf()
    install_initd(java_home)
    evil_priam_auth()
    install_tomcat()
    local('sudo service tomcat7 stop')
    if jmxtrans:
        install_jmxtrans(jmxtrans_deb_uri, jmxtrans_deb_file)
    cleandown_instance()
    print "Image Configured."


# noinspection PyUnusedLocal
def main(argv=None):
    parser = OptionParser(usage="""

    prepare_ami [options]

Prepare a Cassandra AMI.

options:
    j, jmxtrans     [true],false: install jmxtrans
    """)
    parser.add_option(
        '-j', '--jmxtrans', metavar="JMXTRANS", nargs=1, action='store', dest='jmxtrans', default=True,
        help="Install jmxtrans (default true).")
    parser.add_option(
        '-k', '--jmxtrans_deb_uri', metavar="JMXTRANSDEB", nargs=1, action='store', dest='jmxtrans_deb_uri',
        default=True, help="URL to jmxtrans deb.")
    parser.add_option(
        '-l', '--jmxtrans_deb_file', metavar="JMXTRANSFILE", nargs=1, action='store', dest='jmxtrans_deb_file',
        help="File name of jmxtrans deb.")
    parser.add_option(
        '-m', '--java6_uri', metavar="JAVA6URI", nargs=1, action='store', dest='java6_uri',
        help="URL to Java 6.")
    parser.add_option(
        '-n', '--java_bin', metavar="JAVA6URI", nargs=1, action='store', dest='java_bin',
        help="Java bin name for Java 6.")
    parser.add_option(
        '-o', '--java_version', metavar="JAVA6V", nargs=1, action='store', dest='java_version',
        help="Java version name for Java 6.")

    (options, args) = parser.parse_args()
    prepare(
        jmxtrans=options.jmxtrans,
        jmxtrans_deb_uri=options.jmxtrans_deb_uri,
        jmxtrans_deb_file=options.jmxtrans_deb_file,
        java6_uri=options.java6_uri,
        java_bin=options.java_bin,
        java_version=options.java_version
    )
if __name__ == "__main__":
    sys.exit(main())